[gd_scene load_steps=12 format=2]

[ext_resource path="res://enemy.tscn" type="PackedScene" id=1]
[ext_resource path="res://Player.tscn" type="PackedScene" id=2]

[sub_resource type="BoxShape" id=6]
extents = Vector3( 32.0145, 1, 28.0035 )

[sub_resource type="CubeMesh" id=2]

[sub_resource type="BoxShape" id=1]
extents = Vector3( 10, 1, 10 )

[sub_resource type="SpatialMaterial" id=7]
albedo_color = Color( 0.819608, 0.819608, 0.819608, 1 )

[sub_resource type="CubeMesh" id=8]
size = Vector3( 60, 60, 60 )

[sub_resource type="Shader" id=12]
code = "/*
	六角形縁 by あるる（きのもと 結衣）
	Hex Line Shader by Yui Kinomoto @arlez80

	MIT License
*/

shader_type spatial;
render_mode unshaded;

const float PI = 3.1415926535;

uniform vec2 hex_size = vec2( 0.05, 0.08 );
uniform vec4 scan_color : hint_color = vec4( 0.0, 1.0, 0.3, 1.0 );
uniform float scan_line_size : hint_range( 0.0, 0.025 ) = 0.001;

vec2 get_hex_uv( vec2 uv )
{
	bool half = mod( uv.y / 2.0, hex_size.y ) / hex_size.y < 0.5;
	vec2 half_shift_uv = uv + vec2( hex_size.x * 0.5 * float( half ), 0.0 );
	vec2 hex_uv = floor( half_shift_uv / hex_size ) * hex_size;
	vec2 norm_uv = mod( half_shift_uv, hex_size ) / hex_size;

	return hex_uv + mix(
		vec2( 0.0, 0.0 )
	,	mix(
			mix(
				vec2( hex_size.x, -hex_size.y )
			,	vec2( 0.0, -hex_size.y )
			,	float( norm_uv.x < 0.5 )
			)
		,	mix(
				vec2( 0.0, -hex_size.y )
			,	vec2( -hex_size.x, -hex_size.y )
			,	float( norm_uv.x < 0.5 )
			)
		,	float( half )
		)
	,	float( norm_uv.y < 0.3333333 ) * float( norm_uv.y / 0.3333333 < ( abs( norm_uv.x - 0.5 ) * 2.0 ) )
	);
}

void fragment( )
{
	vec2 hex_uv[9];

	for( int y=0; y<3; y ++ ) {
		for( int x=0; x<3; x ++ ) {
			hex_uv[y*3+x] = get_hex_uv( UV + vec2( scan_line_size * float( x - 1 ), scan_line_size * float( y - 1 ) ) );
		}
	}

	vec2 sobel_src_x = (
		hex_uv[0] * -1.0
	+	hex_uv[3] * -2.0
	+	hex_uv[6] * -1.0
	+	hex_uv[2] * 1.0
	+	hex_uv[5] * 2.0
	+	hex_uv[8] * 1.0
	);
	vec2 sobel_src_y = (
		hex_uv[0] * -1.0
	+	hex_uv[1] * -2.0
	+	hex_uv[2] * -1.0
	+	hex_uv[6] * 1.0
	+	hex_uv[7] * 2.0
	+	hex_uv[8] * 1.0
	);
	vec2 sobel = sqrt( sobel_src_x * sobel_src_x + sobel_src_y * sobel_src_y );

	ALBEDO = scan_color.rgb;
	ALPHA = scan_color.a * float( 0.01 < length( sobel ) );
}

	/*
	//	中心位置からの距離を出すけど、普通に二次元距離なので役にたたない
	//	六角形を三次元で扱う方法でやったほうがいい
	float hex_x1 = abs( mod( UV.x / size.x + 0.5, 1.0 ) - 0.5 );
	float hex_x2 = abs( mod( UV.x / size.x, 1.0 ) - 0.5 );
	vec2 dist_uv = vec2(
		mix(
			hex_x1
		,	hex_x2
		,	float( mod( UV.y / 2.0, size.y ) / size.y - hex_x1 * 0.3333333 < 0.0 )
		+	float( 0.0 < mod( UV.y / 2.0, size.y ) / size.y - 0.5 - hex_x2 * 0.3333333 )
		) * 1.666666
	,	abs( hex_uv.y - half_shift_uv.y + size.y * 0.65 ) / size.y
	);
	*/
"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/hex_size = Vector2( 0.05, 0.08 )
shader_param/scan_color = Color( 0, 1, 0.3, 1 )
shader_param/scan_line_size = 0.001

[sub_resource type="Animation" id=10]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector3( -18.8952, -20.6066, 8.07957 ) ]
}

[sub_resource type="Animation" id=11]
resource_name = "rotate"
length = 12.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 6, 12 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector3( 180, 99, 8.08 ), Vector3( 0, 60, 8.08 ), Vector3( -180, 99, 8.08 ) ]
}

[node name="Level 1" type="Spatial"]

[node name="The Floor" type="StaticBody" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="The Floor"]
shape = SubResource( 6 )

[node name="MeshInstance" type="MeshInstance" parent="The Floor"]
transform = Transform( 32, 0, 0, 0, 1, 0, 0, 0, 28, 0, 0, 0 )
mesh = SubResource( 2 )
material/0 = null

[node name="The Floor2" type="StaticBody" parent="."]
transform = Transform( 0.980611, 0.195964, 0, -0.195964, 0.980611, 0, 0, 0, 1, -36.2064, 1.86202, 16.9578 )

[node name="CollisionShape" type="CollisionShape" parent="The Floor2"]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="The Floor2"]
transform = Transform( 10, 0, 0, 2.38419e-07, 1, 0, 0, 0, 10, 0, 0, 0 )
mesh = SubResource( 2 )
material/0 = SubResource( 7 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.491987, 0.715083, -0.496594, 0.503278, 0.69904, 0.507991, 0.710394, 3.94262e-08, -0.703804, -26.6248, 28, -25.1334 )
shadow_enabled = true
directional_shadow_max_distance = 128.1

[node name="Player" parent="." instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -4.44956, 20.8877, 2.56566 )

[node name="enemy" parent="." instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8.58883, 1.09988, 0 )

[node name="The Floor3" type="StaticBody" parent="."]
transform = Transform( 0.926897, -0.375318, 0, 0.375318, 0.926897, 0, 0, 0, 1, -30.658, 5.88057, 0.618885 )

[node name="CollisionShape" type="CollisionShape" parent="The Floor3"]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="The Floor3"]
transform = Transform( 10, 0, 0, 4.76837e-07, 1, 0, 0, 0, 10, 0, 0, 0 )
mesh = SubResource( 2 )
skeleton = NodePath("../../The Floor3")
material/0 = SubResource( 7 )

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 0.942747, -0.0187121, -0.332984, 0.132974, 0.936721, 0.323839, 0.305854, -0.349576, 0.885579, 0, -67.3821, 0 )
mesh = SubResource( 8 )
material/0 = SubResource( 13 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="MeshInstance"]
autoplay = "rotate"
anims/RESET = SubResource( 10 )
anims/rotate = SubResource( 11 )
